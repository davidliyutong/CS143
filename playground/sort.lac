: sort
variable sort_vec sort_vec ! \ char * vec = input;
variable sort_len \ int len;

sort_vec @ count sort_len ! \ len = strlen(vec);
variable sort_i 0 sort_i ! \ int i = 0;
variable sort_j 0 sort_j ! \ int j = 0;
variable tmp 0 tmp ! \ int tmp = 0;

while 
sort_i @ sort_len @ = if break then \ while (i != len)
    while 
    sort_j @ sort_len @ = if break then \ while (j != len)
        sort_vec @ sort_j @ + @ dup sort_vec @ sort_i @ + @ < if \ if(vec[i] < vec[j])
            sort_vec @ sort_i @ + @ \ { swap(vec[i],vec[j]); }
            sort_vec @ sort_j @ + !
            sort_vec @ sort_i @ + !
        else
            drop \ else{;}
        then
        sort_j @ 1 + sort_j ! \ j++;
    loop
    sort_i @ 1 + dup sort_i ! sort_j ! \ i++ ; j = i;
loop
; \ return ;

: go_sort \ entrance
" bubble_sort (" count type
    dup count type
    " ) vaut : " count type
    sort sort_vec @ count type
;

" eastdfffruwieouawrbceyurug" go_sort



