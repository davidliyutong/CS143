: ++ 1 + ;
: -- 1 - ;

: strlen
\ Data stack : [...| &string | <- top
variable strlen_input \ char * input;
variable strlen_cnt 0 strlen_cnt ! \ int cnt = 0;;

dup strlen_input ! \ input = &string;

while
strlen_input @ strlen_cnt @ + @ 0 = if break else \ while (input[cnt] != 0)
strlen_cnt @ ++ strlen_cnt ! \ cnt ++;
then
loop

strlen_cnt @ \ Output to Data stack
\ Data stack : [...| &string | strlen(&string) <- top
;

: strcpy \ str2 = str1
\ Data stack : [...| str1 | str2 | <- top
variable strcpy_str1 variable strcpy_str2 
strcpy_str2 ! strcpy_str1 !
variable strcpy_len1 variable strcpy_len2
variable strcpy_cnt 0 strcpy_cnt !

\ Data stack : [...| <- top

strcpy_str1 @ strlen strcpy_len1 ! drop
strcpy_str2 @ strlen strcpy_len2 ! drop

\ Data stack : [...| <- top
while
    strcpy_cnt @ strcpy_len1 @ = if break
    else
        strcpy_str1 @ strcpy_cnt @ + @ strcpy_str2 @ strcpy_cnt @ + !
    then
    strcpy_cnt @ ++ strcpy_cnt !
loop

strcpy_str1 @ strcpy_str2 @ 

\ Data stack : [...| str1 | str2 | <- top
;

: strcmp
\ Data stack : [...| str1 | str2 | <- top

variable strcmp_str1 variable strcmp_str2 
strcmp_str2 ! strcmp_str1 !

variable strcmp_len1 variable strcmp_len2
strcmp_str1 @ strlen strcmp_len1 ! drop
strcmp_str2 @ strlen strcmp_len2 ! drop

variable strcmp_cnt 0 strcmp_cnt !
variable strcmp_ans 1 strcmp_ans !

strcmp_len1 @ strcmp_len2 @ = if 
    while
    strcmp_str1 @ strcmp_cnt @ + strcmp_str2 @ strcmp_cnt @ + = if
    else
        0 strcmp_ans !
        break
    then
    loop
else
    0 strcmp_ans !
then

strcmp_str1 @ strcmp_str2 @ 0
strcmp_ans @

\ Data stack : [...| str1 | str2 | (str1 == str2)<- top
;

" Bonjour" strlen .